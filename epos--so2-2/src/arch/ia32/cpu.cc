// EPOS-- IA32_CPU Implementation

// This work is licensed under the Creative Commons 
// Attribution-NonCommercial-NoDerivs License. To view a copy of this license, 
// visit http://creativecommons.org/licenses/by-nc-nd/2.0/ or send a letter to 
// Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

#include <arch/ia32/cpu.h>

__BEGIN_SYS

void IA32::Context::save() volatile
{
    // this should have been generated by GCC
    ASM("	pushl	%ebp						\n"
 	"	movl	%esp, %ebp					\n"
	"	movl    8(%ebp), %esp	# this		 		\n"
	"	addl    $40, %esp      	# + sizeof(Context)		\n"
	"	pushl	4(%ebp)		# eip				\n"
	"	pushfl							\n"
	"	pushl	%eax						\n"
	"	pushl	%ecx						\n"
	"	pushl	%edx						\n"
	"	pushl	%ebx						\n"
	"	pushl   %ebp		# esp				\n"
	"	pushl   (%ebp)		# ebp				\n"
	"	pushl	%esi						\n"
	"	pushl	%edi						\n"
	"	movl    %ebp, %esp					\n"
	"	popl    %ebp						\n");
}

// POPA saves an extra "esp" (which is always "this"),
// but saves several instruction fetchs
void IA32::Context::load() const volatile
{
    ASM("	movl    4(%esp), %esp	# this	\n"
	"	popal				\n"
 	"	popfl				\n");
}

// void IA32::Context::load() const volatile
// {
//     ASM("	movl    4(%esp), %esp	# this	\n"
// 	"	popl	%edi			\n"
// 	"	popl	%esi			\n"
// 	"	popl	%ebp			\n"
// 	"	popl	%ebx			\n"
// 	"	popl	%edx			\n"
// 	"	popl	%ecx			\n"
// 	"	popl	%eax			\n"
// 	"	popfl				\n");
// }

// The same here: one extra push and one extra pop, but several fecths less
void IA32::switch_context(Context * volatile * o, Context * volatile n)
{
    ASM("	pushfl				\n"
	"	pushal				\n"
	"	movl    40(%esp), %eax	# old	\n" 
	"	movl    %esp, (%eax)		\n"
	"	movl    44(%esp), %esp	# new	\n"
	"	popal				\n"
	"	popfl				\n");
}

// void IA32::switch_context(Context * volatile * o, Context * volatile n)
// {
//     ASM("	pushfl				\n"
// 	 "	pushl   %eax			\n"
// 	 "	pushl   %ecx			\n"
// 	 "	pushl   %edx			\n"
// 	 "	pushl   %ebx			\n"
// 	 "	pushl   %ebp			\n"
// 	 "	pushl   %esi			\n"
// 	 "	pushl   %edi			\n"
// 	 "	movl    36(%esp), %eax	# old	\n" 
// 	 "	movl    %esp, (%eax)		\n"
// 	 "	movl    40(%esp), %esp	# new	\n"
// 	 "	popl    %edi			\n"
// 	 "	popl    %esi			\n"
// 	 "	popl    %ebp			\n"
// 	 "	popl    %ebx			\n"
// 	 "	popl    %edx			\n"
// 	 "	popl    %ecx			\n"
// 	 "	popl    %eax			\n"
// 	 "	popfl				\n");
// }

__END_SYS
